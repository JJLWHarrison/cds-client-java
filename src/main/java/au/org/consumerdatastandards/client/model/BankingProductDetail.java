/*
 * Consumer Data Standards
 * Sample Data Holder to Demonstrate the Consumer Data Right APIs
 *
 * NOTE: This class is auto generated by the cds-codegen package
 * https://github.com/ConsumerDataStandardsAustralia/cds-codegen
 * Do not edit the class manually.
 */
package au.org.consumerdatastandards.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

import java.util.Objects;
import java.net.URI;
import java.lang.reflect.Field;
import java.util.List;
import java.math.BigDecimal;

/**
* BankingProductDetail
*/
public class BankingProductDetail extends BankingProduct {
            // An array of bundles that this product participates in.  Each
    // bundle is described by free form information but also by a
    // list of product IDs of the other products that are included
    // in the bundle.  It is assumed that the current product is
    // included in the bundle also
        @SerializedName("bundles")
    private List<BankingProductBundle> bundles;
            // Array of features available for the product
        @SerializedName("features")
    private List<BankingProductFeature> features;
            // Constraints on the application for or operation of the
    // product such as minimum balances or limit thresholds
        @SerializedName("constraints")
    private List<BankingProductConstraint> constraints;
            // Eligibility criteria for the product
        @SerializedName("eligibility")
    private List<BankingProductEligibility> eligibility;
            // Fees applicable for the product
        @SerializedName("fees")
    private List<BankingProductFee> fees;
            // Interest rates available for deposits
        @SerializedName("depositRates")
    private List<BankingProductDepositRate> depositRates;
            // Interest rates charged against lending balances
        @SerializedName("lendingRates")
    private List<BankingProductLendingRate> lendingRates;

        
    @ApiModelProperty(value = "An array of bundles that this product participates in.  Each bundle is described by free form information but also by a list of product IDs of the other products that are included in the bundle.  It is assumed that the current product is included in the bundle also", required = false)
    public List<BankingProductBundle> getBundles() {
        return bundles;
    }

    public void setBundles(List<BankingProductBundle> bundles) {
        this.bundles = bundles;
    }
    
    public BankingProductDetail bundles(List<BankingProductBundle> bundles) {
        this.bundles = bundles;
        return this;
    }
    
        
    @ApiModelProperty(value = "Array of features available for the product", required = false)
    public List<BankingProductFeature> getFeatures() {
        return features;
    }

    public void setFeatures(List<BankingProductFeature> features) {
        this.features = features;
    }
    
    public BankingProductDetail features(List<BankingProductFeature> features) {
        this.features = features;
        return this;
    }
    
        
    @ApiModelProperty(value = "Constraints on the application for or operation of the product such as minimum balances or limit thresholds", required = false)
    public List<BankingProductConstraint> getConstraints() {
        return constraints;
    }

    public void setConstraints(List<BankingProductConstraint> constraints) {
        this.constraints = constraints;
    }
    
    public BankingProductDetail constraints(List<BankingProductConstraint> constraints) {
        this.constraints = constraints;
        return this;
    }
    
        
    @ApiModelProperty(value = "Eligibility criteria for the product", required = false)
    public List<BankingProductEligibility> getEligibility() {
        return eligibility;
    }

    public void setEligibility(List<BankingProductEligibility> eligibility) {
        this.eligibility = eligibility;
    }
    
    public BankingProductDetail eligibility(List<BankingProductEligibility> eligibility) {
        this.eligibility = eligibility;
        return this;
    }
    
        
    @ApiModelProperty(value = "Fees applicable for the product", required = false)
    public List<BankingProductFee> getFees() {
        return fees;
    }

    public void setFees(List<BankingProductFee> fees) {
        this.fees = fees;
    }
    
    public BankingProductDetail fees(List<BankingProductFee> fees) {
        this.fees = fees;
        return this;
    }
    
        
    @ApiModelProperty(value = "Interest rates available for deposits", required = false)
    public List<BankingProductDepositRate> getDepositRates() {
        return depositRates;
    }

    public void setDepositRates(List<BankingProductDepositRate> depositRates) {
        this.depositRates = depositRates;
    }
    
    public BankingProductDetail depositRates(List<BankingProductDepositRate> depositRates) {
        this.depositRates = depositRates;
        return this;
    }
    
        
    @ApiModelProperty(value = "Interest rates charged against lending balances", required = false)
    public List<BankingProductLendingRate> getLendingRates() {
        return lendingRates;
    }

    public void setLendingRates(List<BankingProductLendingRate> lendingRates) {
        this.lendingRates = lendingRates;
    }
    
    public BankingProductDetail lendingRates(List<BankingProductLendingRate> lendingRates) {
        this.lendingRates = lendingRates;
        return this;
    }
    

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        
                if(!super.equals(o)) { return false; }
                BankingProductDetail inputModel = (BankingProductDetail) o;
        if(! (bundles.equals(inputModel.getBundles()))) { return false; }
        if(! (features.equals(inputModel.getFeatures()))) { return false; }
        if(! (constraints.equals(inputModel.getConstraints()))) { return false; }
        if(! (eligibility.equals(inputModel.getEligibility()))) { return false; }
        if(! (fees.equals(inputModel.getFees()))) { return false; }
        if(! (depositRates.equals(inputModel.getDepositRates()))) { return false; }
        if(! (lendingRates.equals(inputModel.getLendingRates()))) { return false; }
        return true;
    }

    @Override
    public int hashCode() {
      return Objects.hash(lendingRates,lendingRates,lendingRates,lendingRates,lendingRates,lendingRates,lendingRates);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("class %s {\n", getClass()));        
                        sb.append("    bundles: ").append(toIndentedString(bundles)).append("\n");
                        sb.append("    features: ").append(toIndentedString(features)).append("\n");
                        sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
                        sb.append("    eligibility: ").append(toIndentedString(eligibility)).append("\n");
                        sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
                        sb.append("    depositRates: ").append(toIndentedString(depositRates)).append("\n");
                        sb.append("    lendingRates: ").append(toIndentedString(lendingRates)).append("\n");
                sb.append("}");
        return sb.toString();
    }
    
    private String toIndentedString(java.lang.Object o) {
      if (o == null) {
        return "null";
      }
      return o.toString().replace("\n", "\n    ");
    }
}

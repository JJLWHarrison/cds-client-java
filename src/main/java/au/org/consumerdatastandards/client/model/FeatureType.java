/*
* Consumer Data Standards
* Sample Data Holder to Demonstrate the Consumer Data Right APIs
*
* NOTE: This class is auto generated by the cds-codegen package
* https://github.com/ConsumerDataStandardsAustralia/cds-codegen
* Do not edit the class manually.
*/
package au.org.consumerdatastandards.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;

/**
* FeatureType
* 
* * The type of feature described
* */
@JsonAdapter(FeatureType.Adapter.class)
public enum FeatureType {
        CARD_ACCESS("CARD_ACCESS"),        ADDITIONAL_CARDS("ADDITIONAL_CARDS"),        UNLIMITED_TXNS("UNLIMITED_TXNS"),        FREE_TXNS("FREE_TXNS"),        FREE_TXNS_ALLOWANCE("FREE_TXNS_ALLOWANCE"),        LOYALTY_PROGRAM("LOYALTY_PROGRAM"),        OFFSET("OFFSET"),        OVERDRAFT("OVERDRAFT"),        REDRAW("REDRAW"),        INSURANCE("INSURANCE"),        BALANCE_TRANSFERS("BALANCE_TRANSFERS"),        INTEREST_FREE("INTEREST_FREE"),        INTEREST_FREE_TRANSFERS("INTEREST_FREE_TRANSFERS"),        DIGITAL_WALLET("DIGITAL_WALLET"),        DIGITAL_BANKING("DIGITAL_BANKING"),        NPP_PAYID("NPP_PAYID"),        NPP_ENABLED("NPP_ENABLED"),        DONATE_INTEREST("DONATE_INTEREST"),        BILL_PAYMENT("BILL_PAYMENT"),        COMPLEMENTARY_PRODUCT_DISCOUNTS("COMPLEMENTARY_PRODUCT_DISCOUNTS"),        BONUS_REWARDS("BONUS_REWARDS"),        NOTIFICATIONS("NOTIFICATIONS"),        OTHER("OTHER");    
    private String value;
    
    FeatureType(String value) {
      this.value = value;
    }
    
    @Override
    public String toString() {
      return String.valueOf(value);
    }
    
    public String getValue() {
        return value;
    }

    public static FeatureType fromValue(String value) {
      for (FeatureType b : FeatureType.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
    
    public static class Adapter extends TypeAdapter<FeatureType> {
        @Override
        public void write(final JsonWriter jsonWriter, final FeatureType enumeration) throws IOException {
          jsonWriter.value(enumeration.getValue());
        }
        
        @Override
        public FeatureType read(final JsonReader jsonReader) throws IOException {
          String value = jsonReader.nextString();
          return FeatureType.fromValue(value);
        }
    }
}

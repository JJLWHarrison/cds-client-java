/*
* Consumer Data Standards
* Sample Data Holder to Demonstrate the Consumer Data Right APIs
*
* NOTE: This class is auto generated by the cds-codegen package
* https://github.com/ConsumerDataStandardsAustralia/cds-codegen
* Do not edit the class manually.
*/
package au.org.consumerdatastandards.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

import java.util.Objects;
import java.net.URI;
import java.lang.reflect.Field;
import java.util.List;
import java.math.BigDecimal;

/**
* BankingProduct
*/
public class BankingProduct  {
            // A provider specific unique identifier for this product. This
    // identifier must be unique to a product but does not
    // otherwise need to adhere to ID permanence guidelines.
        @SerializedName("productId")
    private String productId;
            // The date and time from which this product is effective (ie.
    // is available for origination).  Used to enable the
    // articulation of products to the regime before they are
    // available for customers to originate
        @SerializedName("effectiveFrom")
    private OffsetDateTime effectiveFrom;
            // The date and time at which this product will be retired and
    // will no longer be offered.  Used to enable the managed
    // deprecation of products
        @SerializedName("effectiveTo")
    private OffsetDateTime effectiveTo;
            // The last date and time that the information for this product
    // was changed (or the creation date for the product if it has
    // never been altered)
        @SerializedName("lastUpdated")
    private OffsetDateTime lastUpdated;
            // 
        @SerializedName("productCategory")
    private BankingEnumProductCategory productCategory;
            // The display name of the product
        @SerializedName("name")
    private String name;
            // A description of the product
        @SerializedName("description")
    private String description;
            // A label of the brand for the product. Able to be used for
    // filtering. For data providers with single brands this value
    // is still required
        @SerializedName("brand")
    private String brand;
            // An optional display name of the brand
        @SerializedName("brandName")
    private String brandName;
            // A link to the an application web page where this product can
    // be applied for.
        @SerializedName("applicationUri")
    private URI applicationUri;
            // Indicates whether the product is specifically tailored to a
    // circumstance.  In this case fees and prices are
    // significantly negotiated depending on context. While all
    // products are open to a degree of tailoring this flag
    // indicates that tailoring is expected and thus that the
    // provision of specific fees and rates is not applicable
        @SerializedName("isTailored")
    private Boolean isTailored;
            // 
        @SerializedName("additionalInformation")
    private BankingProductAdditionalInformation additionalInformation;

        
    @ApiModelProperty(value = "A provider specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines.", required = true)
    public String getProductId() {
        return productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }
    
    public BankingProduct productId(String productId) {
        this.productId = productId;
        return this;
    }
    
        
    @ApiModelProperty(value = "The date and time from which this product is effective (ie. is available for origination).  Used to enable the articulation of products to the regime before they are available for customers to originate", required = false)
    public OffsetDateTime getEffectiveFrom() {
        return effectiveFrom;
    }

    public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
        this.effectiveFrom = effectiveFrom;
    }
    
    public BankingProduct effectiveFrom(OffsetDateTime effectiveFrom) {
        this.effectiveFrom = effectiveFrom;
        return this;
    }
    
        
    @ApiModelProperty(value = "The date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products", required = false)
    public OffsetDateTime getEffectiveTo() {
        return effectiveTo;
    }

    public void setEffectiveTo(OffsetDateTime effectiveTo) {
        this.effectiveTo = effectiveTo;
    }
    
    public BankingProduct effectiveTo(OffsetDateTime effectiveTo) {
        this.effectiveTo = effectiveTo;
        return this;
    }
    
        
    @ApiModelProperty(value = "The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)", required = true)
    public OffsetDateTime getLastUpdated() {
        return lastUpdated;
    }

    public void setLastUpdated(OffsetDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
    }
    
    public BankingProduct lastUpdated(OffsetDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
        return this;
    }
    
        
    @ApiModelProperty(value = "", required = true)
    public BankingEnumProductCategory getProductCategory() {
        return productCategory;
    }

    public void setProductCategory(BankingEnumProductCategory productCategory) {
        this.productCategory = productCategory;
    }
    
    public BankingProduct productCategory(BankingEnumProductCategory productCategory) {
        this.productCategory = productCategory;
        return this;
    }
    
        
    @ApiModelProperty(value = "The display name of the product", required = true)
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
    
    public BankingProduct name(String name) {
        this.name = name;
        return this;
    }
    
        
    @ApiModelProperty(value = "A description of the product", required = true)
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
    
    public BankingProduct description(String description) {
        this.description = description;
        return this;
    }
    
        
    @ApiModelProperty(value = "A label of the brand for the product. Able to be used for filtering. For data providers with single brands this value is still required", required = true)
    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }
    
    public BankingProduct brand(String brand) {
        this.brand = brand;
        return this;
    }
    
        
    @ApiModelProperty(value = "An optional display name of the brand", required = false)
    public String getBrandName() {
        return brandName;
    }

    public void setBrandName(String brandName) {
        this.brandName = brandName;
    }
    
    public BankingProduct brandName(String brandName) {
        this.brandName = brandName;
        return this;
    }
    
        
    @ApiModelProperty(value = "A link to the an application web page where this product can be applied for.", required = false)
    public URI getApplicationUri() {
        return applicationUri;
    }

    public void setApplicationUri(URI applicationUri) {
        this.applicationUri = applicationUri;
    }
    
    public BankingProduct applicationUri(URI applicationUri) {
        this.applicationUri = applicationUri;
        return this;
    }
    
        
    @ApiModelProperty(value = "Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable", required = true)
    public Boolean getIsTailored() {
        return isTailored;
    }

    public void setIsTailored(Boolean isTailored) {
        this.isTailored = isTailored;
    }
    
    public BankingProduct isTailored(Boolean isTailored) {
        this.isTailored = isTailored;
        return this;
    }
    
        
    @ApiModelProperty(value = "", required = false)
    public BankingProductAdditionalInformation getAdditionalInformation() {
        return additionalInformation;
    }

    public void setAdditionalInformation(BankingProductAdditionalInformation additionalInformation) {
        this.additionalInformation = additionalInformation;
    }
    
    public BankingProduct additionalInformation(BankingProductAdditionalInformation additionalInformation) {
        this.additionalInformation = additionalInformation;
        return this;
    }
    

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        
                BankingProduct inputModel = (BankingProduct) o;
        if(! (productId.equals(inputModel.getProductId()))) { return false; }
        if(! (effectiveFrom.equals(inputModel.getEffectiveFrom()))) { return false; }
        if(! (effectiveTo.equals(inputModel.getEffectiveTo()))) { return false; }
        if(! (lastUpdated.equals(inputModel.getLastUpdated()))) { return false; }
        if(! (productCategory.equals(inputModel.getProductCategory()))) { return false; }
        if(! (name.equals(inputModel.getName()))) { return false; }
        if(! (description.equals(inputModel.getDescription()))) { return false; }
        if(! (brand.equals(inputModel.getBrand()))) { return false; }
        if(! (brandName.equals(inputModel.getBrandName()))) { return false; }
        if(! (applicationUri.equals(inputModel.getApplicationUri()))) { return false; }
        if(! (isTailored.equals(inputModel.getIsTailored()))) { return false; }
        if(! (additionalInformation.equals(inputModel.getAdditionalInformation()))) { return false; }
        return true;
    }

    @Override
    public int hashCode() {
      return Objects.hash(additionalInformation,additionalInformation,additionalInformation,additionalInformation,additionalInformation,additionalInformation,additionalInformation,additionalInformation,additionalInformation,additionalInformation,additionalInformation,additionalInformation);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("class %s {\n", getClass()));        
                        sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
                        sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
                        sb.append("    effectiveTo: ").append(toIndentedString(effectiveTo)).append("\n");
                        sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
                        sb.append("    productCategory: ").append(toIndentedString(productCategory)).append("\n");
                        sb.append("    name: ").append(toIndentedString(name)).append("\n");
                        sb.append("    description: ").append(toIndentedString(description)).append("\n");
                        sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
                        sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
                        sb.append("    applicationUri: ").append(toIndentedString(applicationUri)).append("\n");
                        sb.append("    isTailored: ").append(toIndentedString(isTailored)).append("\n");
                        sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
                sb.append("}");
        return sb.toString();
    }
    
    private String toIndentedString(java.lang.Object o) {
      if (o == null) {
        return "null";
      }
      return o.toString().replace("\n", "\n    ");
    }
}
